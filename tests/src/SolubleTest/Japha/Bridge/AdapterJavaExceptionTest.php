<?php

/*
 * Soluble Japha
 *
 * @link      https://github.com/belgattitude/soluble-japha
 * @copyright Copyright (c) 2013-2020 Vanvelthem SÃ©bastien
 * @license   MIT License https://github.com/belgattitude/soluble-japha/blob/master/LICENSE.md
 */

namespace SolubleTest\Japha\Bridge;

use PHPUnit\Framework\Attributes\Test;
use Soluble\Japha\Bridge\Driver\AbstractDriver;
use Soluble\Japha\Bridge\Exception\NoSuchMethodException;
use Soluble\Japha\Bridge\Exception\JavaExceptionInterface;
use Soluble\Japha\Bridge\Exception\JavaException;
use Soluble\Japha\Bridge\Exception\RuntimeException;
use Soluble\Japha\Bridge\Adapter;
use Soluble\Japha\Bridge\Exception;
use Soluble\Japha\Bridge\Exception\ClassNotFoundException;
use Soluble\Japha\Bridge\Exception\InvalidArgumentException;
use Soluble\Japha\Util\Exception\UnsupportedTzException;
use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-04 at 16:47:42.
 */
class AdapterJavaExceptionTest extends TestCase
{
    /**
     * @var string
     */
    protected $servlet_address;

    /**
     * @var Adapter
     */
    protected $adapter;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        \SolubleTestFactories::startJavaBridgeServer();

        $this->servlet_address = \SolubleTestFactories::getJavaBridgeServerAddress();

        $this->adapter = new Adapter([
            'driver' => 'Pjb62',
            'servlet_address' => $this->servlet_address,
        ]);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    #[Test]
    public function getDriver(): void
    {
        $driver = $this->adapter->getDriver();
        $this->assertInstanceOf(AbstractDriver::class, $driver);
    }

    #[Test]
    public function javaExceptionInterfaceMethods(): void
    {
        $ba = $this->adapter;

        try {
            $string = $ba->java('java.lang.String', 'Hello world');
            $string->anInvalidMethod();
            $this->assertFalse(true, 'This code cannot be reached');
        } catch (NoSuchMethodException $e) {
            $this->assertInstanceOf(JavaExceptionInterface::class, $e);

            $stackTrace = $e->getStackTrace();
            $this->assertIsString($stackTrace);

            $cause = $e->getCause();
            $this->assertIsString($cause);
            $this->assertStringStartsWith('java.lang.NoSuchMethodException: anInvalidMethod()', $cause);

            $message = $e->getMessage();
            $this->assertIsString($message);
            $this->assertStringContainsString('java.lang.NoSuchMethodException', $message);
            $this->assertStringContainsString('[[o:String]]->anInvalidMethod', $message);

            $javaClassName = $e->getJavaClassName();
            $this->assertIsString($javaClassName);
            $this->assertSame('java.lang.NoSuchMethodException', $javaClassName);

            $driverException = $e->getDriverException();
            $this->assertInstanceOf(\Exception::class, $driverException);
        } catch (\Exception) {
            $this->assertFalse(true, 'This code cannot be reached');
        }
    }

    #[Test]
    public function commonExceptions(): void
    {
        $ba = $this->adapter;

        try {
            $string = $ba->java('java.lang.String', 'Hello world');
            $string->anInvalidMethod();
            $this->assertFalse(true, 'This code cannot be reached');
        } catch (NoSuchMethodException $e) {
            $this->assertInstanceOf(JavaExceptionInterface::class, $e);
            $this->assertTrue(true);
        } catch (\Exception $e) {
            $this->assertFalse(true, 'This code cannot be reached');
        }

        // Class not found
        try {
            $string = $ba->java('java.INVALID.String', 'Hello world');
            $this->assertFalse(true, 'This code cannot be reached');
        } catch (ClassNotFoundException $e) {
            $this->assertInstanceOf(JavaExceptionInterface::class, $e);
            $this->assertTrue(true);
        } catch (\Exception) {
            $this->assertFalse(true, 'This code cannot be reached');
        }

        try {
            $string = $ba->java('java.Invalid.String', 'Hello world');
        } catch (JavaException) {
            $this->assertTrue(true);
        } catch (\Exception) {
            $this->assertFalse(true, 'This code cannot be reached');
        }
    }

    #[Test]
    public function javaClassThrowsClassNotFoundException(): void
    {
        $this->expectException(ClassNotFoundException::class);
        $ba = $this->adapter;
        $ba->javaClass('java.INVALIDPKG.HashMap');
    }

    #[Test]
    public function isInstanceThrowsClassNotFoundException(): void
    {
        $this->expectException(ClassNotFoundException::class);
        $ba = $this->adapter;
        $string = $ba->java('java.lang.String', 'cool');

        $ba->isInstanceOf($string, 'java.InvalidPKG.String');
    }

    #[Test]
    public function isInstanceThrowsInvalidArgumentException(): void
    {
        $this->expectException(InvalidArgumentException::class);
        $ba = $this->adapter;
        $string = $ba->java('java.lang.String', 'cool');

        $ba->isInstanceOf($string, []);
    }

    #[Test]
    public function exceptionToString(): void
    {
        $ba = $this->adapter;

        try {
            $ba = new Adapter([
                'driver' => 'Pjb62',
                'servlet_address' => $this->servlet_address,
                'java_default_timezone' => 'InvalidTimezone'
            ]);
        } catch (\Exception $exception) {
            $this->assertInstanceOf(RuntimeException::class, $exception);
            $this->assertInstanceOf(UnsupportedTzException::class, $exception);
            $this->assertTrue(true);
            $this->assertIsString($exception->__toString());
        }
    }
}
