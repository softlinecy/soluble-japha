<?php

/*
 * Soluble Japha
 *
 * @link      https://github.com/belgattitude/soluble-japha
 * @copyright Copyright (c) 2013-2020 Vanvelthem SÃ©bastien
 * @license   MIT License https://github.com/belgattitude/soluble-japha/blob/master/LICENSE.md
 */

namespace SolubleTest\Japha\Bridge;

use PHPUnit\Framework\Attributes\Test;
use Soluble\Japha\Bridge\Adapter;
use Soluble\Japha\Bridge\Exception\ClassNotFoundException;
use Soluble\Japha\Interfaces\JavaObject;
use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-04 at 16:47:42.
 */
class AdapterJavaClassTest extends TestCase
{
    /**
     * @var string
     */
    protected $servlet_address;

    /**
     * @var Adapter
     */
    protected $adapter;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        \SolubleTestFactories::startJavaBridgeServer();

        $this->servlet_address = \SolubleTestFactories::getJavaBridgeServerAddress();
        $this->adapter = new Adapter([
            'driver' => 'Pjb62',
            'servlet_address' => $this->servlet_address,
        ]);
    }

    #[Test]
    public function getName(): void
    {
        $ba = $this->adapter;

        $cls = $ba->javaClass('java.util.HashMap');
        $className = $cls->getName();
        $this->assertIsString($className);
        $this->assertSame('java.util.HashMap', $className);
    }

    #[Test]
    public function getClassOnClass(): void
    {
        $ba = $this->adapter;

        $cls = $ba->javaClass('java.util.HashMap');
        $class = $cls->getClass();
        $this->assertInstanceOf(JavaObject::class, $class);
        // @TODO possible bc-break, makes this type of call returning a
        // JavaClass
        //self::assertInstanceOf(JavaClass::class, $class);
        $this->assertSame('java.lang.Class', $class->getName());
    }

    #[Test]
    public function javaClassThrowsClassNotFoundException(): void
    {
        $this->expectException(ClassNotFoundException::class);

        $ba = $this->adapter;

        $ba->javaClass('java.INVALIDPKG.HashMap');
    }
}
